#!/usr/bin/perl -w

use warnings;
use strict;

use XML::SAX;
use XML::SAX::Writer;
use File::Temp qw/tempdir/;

# Yes, I should be using something more modern. No, not now -- I would need to
# learn first, and this is too urgent.
use CGI;

package xmlfilter;

use base qw(XML::SAX::Base);

sub new {
	my ($class, $hash, @args) = @_;

	my $self = $class->SUPER::new(@args);

	foreach my $key(keys %$hash) {
		$self->{"xmlfilter_$key"} = $hash->{$key};
	}

	$self->{xmlfilter_element} = "";
	$self->{xmlfilter_last_id} = "";

	return $self;
}

sub characters {
	my ($self, $data, @rest) = @_;

	if($self->{xmlfilter_element} eq "id") {
		$self->{xmlfilter_last_id} .= $data->{Data};
	}
	if(exists($self->{xmlfilter_file_name}) &&
				length($self->{xmlfilter_file_name}) > 0) {
		open OUT, ">", $self->{xmlfilter_file_name};
		my $s = pack 'H*', $data->{Data};
		print OUT $s;
		close OUT;
		$self->{xmlfilter_file_name} = "";
	}
	if(exists($self->{xmlfilter_override}) && 
				length($self->{xmlfilter_override}) > 0) {
		open IN, "< :raw :bytes", $self->{xmlfilter_override};
		my $s;
		read IN, $s, 9999999;
	       	$s = unpack 'H*', $s;
		$s =~ tr/a-z/A-Z/;
		$data->{Data} = $s;
		close IN;
		$self->{xmlfilter_override} = "";
	}
	return $self->SUPER::characters($data, @rest);
}

sub start_element {
	my ($self, $el, @rest) = @_;

	$self->{xmlfilter_element} = $el->{LocalName};
	if($el->{LocalName} eq "content") {
		chomp $self->{xmlfilter_last_id};
		if(exists($self->{xmlfilter_readfiles}{$self->{xmlfilter_last_id}})) {
			$self->{xmlfilter_override} = $self->{xmlfilter_readfiles}{$self->{xmlfilter_last_id}};
		}
		if(exists($self->{xmlfilter_writefiles}{$self->{xmlfilter_last_id}})) {
			$self->{xmlfilter_file_name} = $self->{xmlfilter_writefiles}{$self->{xmlfilter_last_id}};
		}
	}
	return $self->SUPER::start_element($el, @rest);
}

sub end_element {
	my ($self, $el, @rest) = @_;

	if($el->{LocalName} eq "file") {
		$self->{xmlfilter_last_id} = "";
		delete $self->{xmlfilter_override};
		delete $self->{xmlfilter_file_name};
	}
	return $self->SUPER::end_element($el, @rest);
}

package main;

my $q = CGI->new;
$q->autoEscape(0);
my @hidden;

my %config;

open CONFIG, "</var/lib/eid/config";

while(<CONFIG>) {
	chomp;
	my ($key, $val) = split /=/;
	next if (!($key =~ /^EID_TEST_(.*)$/));
	$key = $1;
	$val =~ s/^"(.*)"$/$1/;
	$config{$key}=$val;
}

close CONFIG;

sub show_hiddens {
	$q->autoEscape(1);
	foreach my $hide(@hidden) {
		print $q->hidden($hide);
	}
	$q->autoEscape(0);
	print "\n";
}

sub do_html {
	print $q->header();
	print $q->start_html({-title=>'eID Test CA', -style=>'/style.css'});
}

sub get_cur_certs {
	my $type = shift;
	open INDEX, "/var/lib/eid/ca-index.txt";
	my $pems = ();
	my $friendlies = {};
	my $states = {};
	my $line;
	while($line = <INDEX>) {
		my ($status, undef, undef, $serial, undef, $friendly) = split /\t/, $line;
		if(defined($type)) {
			next unless $status eq $type;
		}
		push @$pems, "$serial.pem";
		if($status eq 'V') {
			$status = '(valid)';
		} elsif($status eq 'E') {
			$status = '(expired)';
		} elsif($status eq 'R') {
			$status = '(revoked)';
		}
		$friendlies->{"$serial.pem"} = $friendly . " $status";
	}

	return ($pems, $friendlies, $states);
}

sub get_cert {
	my $crt = shift or die "need certificate type!";
	my $type = shift;

	do_html;
	print $q->h1('eID Test CA');
	print $q->start_form({-method=>'post', -action=>$q->url});
	show_hiddens;
	if(!defined($type)) {
		print $q->h2("Certificate selection");
		print $q->p("Please choose a method for selecting the <strong><em>$crt</em></strong> certificate:");
		print $q->radio_group(-name=>"${crt}type",
				-values=>['csr', 'previous', 'none'],
				-labels=>{ "csr" => "Upload a <abbr title='Certificate Signing Request'>CSR</abbr>",
					   "previous" => "Reuse a previously-signed certificate",
					   "none" => "Don't include a $crt certificate"});
	} else {
		print $q->hidden("${crt}type");
		if($type eq "csr") {
			print $q->h2("$crt certificate by CSR");			
			print $q->radio_group(-name=>"ca_name",
				-values=>['ca', 'ca_crl', 'ca_none'],
				-labels=>{ "ca" => "Create certificate for CA with correct OCSP and CRL",
					   "ca_crl" => "Create certificate for CA with incorrect OCSP but correct CRL",
					   "ca_none" => "Create certificate for CA with incorrect OCSP and CRL",
					   "expired" => "Create an expired certificate for CA with correct OCSP and CRL"});			
			print $q->p("Please paste the CSR (in PEM format) in the field below:");
			print $q->textarea(-name=>"${crt}csr", -rows=>25, -columns=>80);
			print $q->br();
		} elsif($type eq "previous") {
			my ($certlist, $certlabels) = get_cur_certs();
			print $q->h2("Select an old $crt certificate");
			print $q->popup_menu(-name=>"${crt}serial",
					     -values=>$certlist,
					     -labels=>$certlabels);
		} else {
			die "unexpected certificate type: got $type, expected csr, none, or previous";
		}
	}
	print $q->submit();
	print $q->end_form();
}

sub sign {
	my $xml_input = $q->param('xmlin');
	if(!defined($xml_input)) {
		do_html;
		print <<EOF ;
	    <h1>eID Test CA</h1>
	    <h2>Note</h2>
	    <p>Using this form (and the CA) is only necessary in the following
	    cases:</p>
	    <ol>
	      <li>You want to test OCSP requests against a live server</li>
	      <li>You want to test address and identity file signature
		verification using the SHA256 hashing algorithm, rather than the
		SHA1 one.</li>
	      <li>You want to test cards with more or fewer certificates than
		are available on the card itself.</li>
	    </ol>
	    <p>In all other cases, the virtual card generator tool produces
	      output that is sufficient.</p>
EOF
		print $q->start_form({-method=>"post", -action=>$q->url});
		show_hiddens;
		print <<EOF ;
	      <h2>XML data</h2>
	      <p>Run the tool to generate virtual cards. This generates an XML
		file containing all the data that should be on the virtual card.
		Paste it in this text area:</p>
	      <textarea name="xmlin" rows="25" cols="80"></textarea>
	      <br>
	      <input type="submit">
EOF
		print $q->end_form();
		print $q->end_html();
		exit;
	} else {
		push @hidden, "xmlin";
	}

	my $sigtype = $q->param('sigtype');
	my $sigcsr = $q->param('sigcsr');
	my $sigserial = $q->param('sigserial');
	my $ca_name = $q->param('ca_name');
	if(!defined($ca_name)) {
		$ca_name = 'ca';		
	}

	if(!defined($sigtype) || ($sigtype ne 'none' && !defined($sigcsr) &&
				!defined($sigserial))) {
		get_cert("sig", $sigtype);
		exit;
	} else {
		push @hidden, 'sigtype';
		push @hidden, 'sigcsr';
		push @hidden, 'sigserial';
		push @hidden, 'ca_name';
	}

	my $authtype = $q->param('authtype');
	my $authcsr = $q->param('authcsr');
	my $authserial = $q->param('authserial');

	if(!defined($authtype) || ($authtype ne 'none' && !defined($authcsr) &&
			!defined ($authserial))) {
		get_cert("auth", $authtype);
		exit;
	} else {
		push @hidden, "authtype";
		push @hidden, "authcsr";
		push @hidden, "authserial";
	}

	# We have all the data we need now, so write them to a file and do stuff

	my $dir = tempdir();
	open XML, ">$dir/input.xml";
	print XML $xml_input;
	close XML;
	
	if($sigtype ne "none") {
		if($sigtype eq "csr") {
			open PEM, ">$dir/sig.csr";
			print PEM $sigcsr;
			close PEM;
			system("camanage signsig_$ca_name < $dir/sig.csr > $dir/sig.pem");
		} elsif($sigtype eq "previous") {
			symlink "/var/lib/eid/" . $ca_name . "/$sigserial","$dir/sig.pem";
		}
		system("openssl x509 -in $dir/sig.pem -outform der -out $dir/sig.der");
	} else {
		symlink "/dev/null", "$dir/sig.der";
	}

	if($authtype ne "none") {
		if($authtype eq "csr") {
			open PEM, ">$dir/auth.csr";
			print PEM $authcsr;
			close PEM;
			system("camanage signauth_$ca_name < $dir/auth.csr > $dir/auth.pem");
		} elsif($sigtype eq "previous") {
			symlink "/var/lib/eid/" . $ca_name . "/$authserial","$dir/auth.pem";
		}
		system("openssl x509 -in $dir/auth.pem -outform der -out $dir/auth.der");
	} else {
		symlink "/dev/null", "$dir/auth.der";
	}

	system("openssl x509 -in /var/lib/eid/" . $config{ROOT_NAME} . ".crt -outform der -out $dir/" . $config{ROOT_NAME} . ".der");
	system("openssl x509 -in /var/lib/eid/" . $ca_name . ".crt -outform der -out $dir/" . $ca_name . ".der");
	system("openssl x509 -in /var/lib/eid/" . $config{ROOT_NAME} . "-rrn.crt -outform der -out $dir/rrn.der");

	my %writefiles = (	"3F00DF014031" => "$dir/idfile.asn1",
				"3F00DF014033" => "$dir/addressfile.asn1",
				"3F00DF014035" => "$dir/photo.jpg");

	my %readfiles = (	"3F00DF014031" => "$dir/idfile.asn1",
				"3F00DF014032" => "$dir/idsig",
				"3F00DF014033" => "$dir/addressfile.asn1",
				"3F00DF014034" => "$dir/addrsig",
				"3F00DF005038" => "$dir/auth.der",
				"3F00DF005039" => "$dir/sig.der",
				"3F00DF00503A" => "$dir/" . $ca_name . ".der",
				"3F00DF00503B" => "$dir/" . $config{ROOT_NAME} . ".der",
				"3F00DF00503C" => "$dir/rrn.der");

	my $w = XML::SAX::Writer->new();
	my $firstfilter = xmlfilter->new({writefiles => \%writefiles});
	my $secondfilter = xmlfilter->new({readfiles => \%readfiles});
	$secondfilter->set_handler($w);
	my $firstparser = XML::SAX::ParserFactory->parser(Handler => $firstfilter);
	my $secondparser = XML::SAX::ParserFactory->parser(Handler => $secondfilter);

	# Parse the XML file and grab contents we need to sign
	$firstparser->parse_uri("$dir/input.xml");

	my $alg = $config{CA_TYPE} eq "sha256" ? 2 : 1;
	system("/usr/local/bin/resign $dir/idfile.asn1 $dir/idsig $dir/photo.jpg $dir/addressfile.asn1 $dir/addrsig /var/lib/eid/" . $config{ROOT_NAME} . "-rrn.key $alg");
	print $q->header('text/plain');
	print "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
	# Parse the same XML file a second time, substituting certain files
	# with others
	$secondparser->parse_uri("$dir/input.xml");
}

sub suspend {
	do_html;
	print $q->h1("Suspend certificates");
	my @certs = $q->multi_param('certs');
	if(scalar(@certs) == 0) {
		print $q->start_form({-method=>"post", -action=>$q->url});
		show_hiddens;
		my ($certlist, $certlabels) = get_cur_certs('V');
		print $q->p("Please select the certificates to suspend");
		print $q->scrolling_list(-name=>'certs', -values=>$certlist, -labels=>$certlabels, -multiple=>'true');
		print $q->submit;
		print $q->end_form;
		print $q->end_html;
		exit;
	}
	push @hidden, 'certs';
	print $q->p("Suspending certificates...");
	print "<blockquote><code>";
	foreach my $cert(@certs) {
		my $serial = $cert;
		$serial =~ s/\.pem$//;
		print "$serial...\n";
		system("camanage suspend $serial");
	}
	print "done\n";
	print "</code></blockquote>";
}

sub revoke {
	do_html;
	print $q->h1("Revoke certificates");
	my @certs = $q->multi_param('certs');
	if(scalar(@certs) == 0) {
		print $q->start_form({-method=>"post", -action=>$q->url});
		show_hiddens;
		my ($certlist, $certlabels) = get_cur_certs('V');
		print $q->p("Please select the certificates to revoke");
		print $q->scrolling_list(-name=>'certs', -values=>$certlist, -labels=>$certlabels, -multiple=>'true');
		print $q->submit;
		print $q->end_form;
		print $q->end_html;
		exit;
	}
	push @hidden, 'certs';
	print $q->p("Revoking certificates...");
	print "<blockquote><code>";
	foreach my $cert(@certs) {
		my $serial = $cert;
		$serial =~ s/\.pem$//;
		print "$serial...\n";
		system("camanage revoke $serial");
	}
	print "done\n";
	print "</code></blockquote>";
}

sub reinstate {
	do_html;
	print $q->h1("Reinstate certificates");
	my @certs = $q->multi_param('certs');
	if(scalar(@certs) == 0) {
		print $q->start_form({-method=>"post", -action=>$q->url});
		show_hiddens;
		my ($certlist, $certlabels) = get_cur_certs('R');
		print $q->p("Please select the certificates to reinstate");
		print $q->scrolling_list(-name=>'certs', -values=>$certlist, -labels=>$certlabels, -multiple=>'true');
		print $q->submit;
		print $q->end_form;
		print $q->end_html;
		exit;
	}
	push @hidden, 'certs';
	print $q->p("Reinstating certificates...");
	print "<blockquote><code>";
	foreach my $cert(@certs) {
		my $serial = $cert;
		$serial =~ s/\.pem$//;
		print "$serial...\n";
		system("camanage reinstate $serial");
	}
	print "done\n";
	print "</code></blockquote>";
}

my $action = $q->param("action");
if(!defined($action)) {
	do_html;
	print <<EOF ;
    <h1>eID Test CA</h1>
    <h2>Action</h2>
    <p>Please choose the action you wish to perform:</p>
EOF
	print $q->start_form({-method=>"post", -action=>$q->url});
    	print $q->radio_group(-name=>"action",
			-values=>['sign', 'suspend', 'revoke', 'reinstate'],
			-labels=>{'sign'=>'Sign a card',
				  'suspend'=>"Suspend (disable) a card's certificates",
				  'revoke'=>"Revoke a card's certificates",
				  'reinstate'=>"Reinstate a suspended or revoked certificate. <strong>Note:</strong> while this implementation allows to reinstate a revoked certificate, the production PKI does not."});
	print $q->submit();
	print $q->end_form();
	print $q->end_html();
	exit;
}
push @hidden, "action";

if($action eq "sign") {
	sign;
} elsif($action eq "suspend") {
	suspend;
} elsif($action eq "revoke") {
	revoke;
} elsif($action eq "reinstate") {
	reinstate;
}
